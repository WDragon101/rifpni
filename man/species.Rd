% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/species.R
\name{species}
\alias{species}
\title{species() is used to implement retrieval from IFPNI's species list accroding to different filting conditions.}
\usage{
species(
  name = NULL,
  searchOnlyByFirstSymbols = "",
  order = "name",
  orderDirection = "asc",
  author = "",
  originalSpelling = "",
  yearFrom = "",
  yearTo = "",
  rank = FALSE,
  paleoregion = FALSE
)
}
\arguments{
\item{name}{The name or partial name of species taxon.}

\item{searchOnlyByFirstSymbols}{Whether to filter records whose Name starts with name parameter, default no.}

\item{order}{Default is "name". Decide to sort the results by name("name") or year("yearFrom").}

\item{orderDirection}{Default is "asc". Determines whether the results are in positive("asc") or reverse("desc") order.}

\item{author}{Select the record authorized by specific person.}

\item{originalSpelling}{Select the record whose original spelling is given string.}

\item{yearFrom}{Records published after the year of "yearFrom".}

\item{yearTo}{Records published before the year of "yearTo".}

\item{rank}{Select records in one or more specific classification levels.
Default is FALSE, not specifying any classification level means not filtering.
Either character type or numeric type can be used. The supported characters of classification levels are c('Species', 'Superspecies', 'Unranked'), and the corresponding numbers are c(33, 34, 58).}

\item{paleoregion}{Select records distributed in one or more paleoregions.
Default is FALSE, not specifying any paleoregion means not filtering.
Either character type or numeric type can be used. The supported characters of paleoregions are c('Africa', 'Africa (East)', 'Africa (Equatorial)', 'Africa (North)', 'Africa (South)', 'Africa (West)', 'Altaida (Altaides)', 'Altaj', 'America', 'America (Caribbean)', 'America (North)', 'America (North - Greenland)', 'America (South)', 'Anatolia', 'Angarida', 'Angarida (Mongolia)', 'Antarctica', 'Arctic', 'Australia', 'Australia (New Zealand)', 'Avalonia', 'Baltica', 'Cathaysia', 'Cathaysia (Kitakamiland)', 'Cathaysia (North)', 'Cathaysia (Sino-Korea)', 'Cathaysia (South)', 'Caucasus', 'China (North)', 'China (South)', 'Chingiz', 'Columbia (Amazonia)', 'Columbia (Australia)', 'Columbia (Baltica)', 'Columbia (East Antarctica)', 'Columbia (Greenland)', 'Columbia (Indostan)', 'Columbia (Kalahari)', 'Columbia (Laurentia)', 'Columbia (North Australia)', 'Columbia (North China)', 'Columbia (South Australia)', 'Columbia (South China)', 'Columbia (West Africa)', 'Columbia (West Australia)', 'Cong}
}
\value{
A dataframe with detailed information of result.
}
\description{
species() is used to implement retrieval from IFPNI's species list accroding to different filting conditions.
}
\examples{
# let's see how many taxa names contain "wes" in the species list on IFPNI.
wes_species <- species("wes")


# Let's try the most daring operation.
# If you do not pass a value to any argument, you get a dataframe that stores the details of all the taxa in the species list on IFPNI.
# all_species_info <- species()
# In the case that internet connection error, I suggest to use brief_information() and detail_graber().

all_species_url <- basic_species()
brief_all_species <- brief_information(all_species_url, "./data/brief_all_species.csv")

# ✔ There are 44 pages found.
# Collected 44 pages from IFPNI. Elapsed Time: 00:01:9.6
# ✔ There are 432 items found.

write.csv(brief_all_infragenus, "./data/brief_all_infragenus.csv")

brief_all_infragenus_urls <- read.csv("./data/brief_all_infragenus.csv")$URL

while (TRUE) {
  tryCatch({
    all_infragenus_info <- detail_graber(brief_all_infragenus_urls, output_file = "./data/all_infragenus_info.csv")
   }, warning = function(w){
      print(w)
      cat("\n")
      Sys.sleep(10)
   }, error = function(e){
      print(e)
      cat("\n")
      Sys.sleep(10)
   }, finally = {
      break
   })
}

# Collected 432 items from IFPNI. Elapsed Time: 00:12:39.8
# ── Done ─────────────────────────────────────────────────────────────
}
