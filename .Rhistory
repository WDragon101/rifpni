input_dir
spfamily
file.path(input_dir, unique(spfamily))
library(PseuAbs)
?wsl.samplePseuAbs
?write.csv
library(cli)
?cli_h1
cli_alert_success()
cli_alert_success("success")
cli_alert_danger("danger")
cli_alert_warning("warning")
cli_alert_info("info")
cli_h1("Header {.emph 1}")
cli_h2("Header {.emph 2}")
cli_h3("Header {.emph 3}")
cli_end()
?cli_endd
?cli_end
?cli_rule
col_blue("Hello ", "world!")
?col_black
col_br_blue("hello")
cat(col_blue("Hello ", "world!"))
col_blue("Hello ", "world!")
cat(col_green(
"I am a green line ",
col_blue(style_underline(style_bold("with a blue substring"))),
" that becomes green again!"
))
warn <- combine_ansi_styles("magenta", "underline")
cat(warn("Warning: shorter argument was recycled.\n"))
note <- col_cyan
cat(note("Note: no such directory.\n"))
col_blue("Hello ", "world!")
cat(col_blue("Hello ", "world!"))
cat("... to highlight the", col_red("search term"),
"in a block of text\n")
cat("... to highlight the", col_red("search term"),
"in a block of text\n")
?ansi_align
?boxx
str <- c(
col_red("This is red"),
style_bold("This is bold")
)
astr <- ansi_align(str, width = 30)
boxx(astr)
str <- c(
col_red("This is red"),
style_bold("This is bold")
)
astr <- ansi_align(str)
boxx(astr)
str <- c(
col_red("This is red"),
style_bold("This is bold")
)
astr <- ansi_align(str, align = "center", width = 30)
boxx(astr)
str <- c(
col_red("This is red"),
style_bold("This is bold")
)
astr <- ansi_align(str, align = "right", width = 30)
boxx(astr)
?ansi_collapse
ansi_collapse(letters)
ansi_collapse(letters)
ansi_collapse(letters, trunc = 5)
ansi_collapse(letters, trunc = 5, style = "head")
?ansi_columns
fmt <- ansi_columns(
paste(col_red("foo"), 1:10),
width = 50,
fill = "rows",
max_cols=10,
align = "center",
sep = "   "
)
boxx(fmt, padding = c(0,1,0,1), header = col_cyan("Columns"))
?ansi_grep
red_needle <- col_red("needle")
haystack <- c("foo", "needle", "foo")
green_haystack <- col_green(haystack)
ansi_grepl(red_needle, haystack)
ansi_grepl(red_needle, green_haystack)
?ansi_has_any
ansi_has_any("foobar")
ansi_has_any(col_red("foobar"))
?ansi_hide_cursor
?ansi_html
code <- withr::with_options(
list(ansi.num_colors = 256),
code_highlight(format(ansi_html))
)
code
hcode <- paste(ansi_html(code), collapse = "\n")
hcode
css <- paste(format(ansi_html_style()), collapse=  "\n")
page <- htmltools::tagList(
htmltools::tags$head(htmltools::tags$style(css)),
htmltools::tags$pre(htmltools::HTML(hcode))
)
View(page)
if (interactive()) htmltools::html_print(page)
?ansi_html_style
ansi_html_style(colors = FALSE)
ansi_html_style(colors = 8, palette = "iterm-snazzy")
?ansi_nchar
str <- paste(
col_red("red"),
"default",
col_green("green")
)
cat(str, "\n")
nchar(str)
ansi_nchar(str)
nchar(ansi_strip(str))
?ansi_nzchar
ansi_nzchar("")
ansi_nzchar(col_red(""))
ansi_nzchar(col_red("redd"))
library(cli)
?cli_progress_bar
fun <- function() {
cli_progress_bar("First step ", total = 100, clear=FALSE)
for (i in 1:100) {
Sys.sleep(2/100)
cli_progress_update()
}
cli_progress_bar("Second step", total = 100, clear = FALSE)
for (i in 1:100) {
Sys.sleep(2/100)
cli_progress_update()
}
}
View(fun)
?ansi_nzchar
ansi_nzchar(col_red("dd"))
ansi_nzchar("")
ansi_nzchar(col_red(""))
ansi_simplify(" cli_h1(paste("Executing",col_green(style_italic("genus")) ,"function" ))")
ansi_simplify( cli_h1(paste("Executing",col_green(style_italic("genus")) ,"function" )))
ansi_simplify(' cli_h1(paste("Executing",col_green(style_italic("genus")) ,"function" ))')
?ansi_strip
ansi_strip(col_red("foobar")) == "foobar"
?ansi_strsplit
str <- paste0(
col_red("I am red---"),
col_green("and I am green-"),
style_underline("I underlined")
)
cat(str, "\n")
# split at dashes, keep color
cat(ansi_strsplit(str, "[-]+")[[1]], sep = "\n")
strsplit(ansi_strip(str), "[-]+")
# split to characters, keep color
cat(ansi_strsplit(str, "")[[1]], "\n", sep = " ")
strsplit(ansi_strip(str), "")
str <- paste0(
col_red("I am red---"),
col_green("and I am green-"),
style_underline("I underlined")
)
cat(str, "\n")
cat(ansi_strsplit(str, "[-]+")[[1]], sep = "\n")
strsplit(ansi_strip(str), "[-]+")
cat(ansi_strsplit(str, "")[[1]], "\n", sep = " ")
strsplit(ansi_strip(str), "")
?strtrim
strtrim(c("abcdef", "abcdef", "abcdef"), c(1,5,10))
?ansi_strtrim
cli:::lorem_ipsum()
cli::col_red(cli:::lorem_ipsum())
text <- cli::col_red(cli:::lorem_ipsum())
ansi_strtrim(c(text, "foobar"), 40)
?ansi_strwrap
text <- cli:::lorem_ipsum()
rexp <- gregexpr("\\b([sS][a-zA-Z]+)\\b", text)
regmatches(text, rexp) <- lapply(regmatches(text, rexp), col_red)
cat(text)
wrp <- ansi_strwrap(text, width = 40)
cat(wrp, sep = "\n")
?ansi_substr
str <- paste(
col_red("red"),
"default",
col_green("green")
)
cat(str, "\n")
cat(ansi_substr(str, 1, 5), "\n")
cat(ansi_substr(str, 1, 15), "\n")
cat(ansi_substr(str, 3, 7), "\n")
substr(ansi_strip(str), 1, 5)
substr(ansi_strip(str), 1, 15)
substr(ansi_strip(str), 3, 7)
str2 <- paste(
"another",
col_red("multi-", style_underline("style")),
"text"
)
cat(str2, "\n")
cat(ansi_substr(c(str, str2), c(3,5), c(7, 18)), sep = "\n")
substr(ansi_strip(c(str, str2)), c(3,5), c(7, 18))
?ansi_substring
str <- paste(
col_red("red"),
"default",
col_green("green")
)
cat(str, "\n")
cat(ansi_substring(str, 1, 5), "\n")
substring(ansi_strip(str), 1, 5)
?ansi_toupper
ansi_toupper(col_red("Uppercase"))
ansi_tolower(col_red("LowerCase"))
x <- paste0(col_green("MiXeD"), col_red(" cAsE 123"))
ansi_chartr("iXs", "why", x)
?ansi_trimws
trimws(paste0("   ", col_red("I am red"), "   "))
ansi_trimws(paste0("   ", col_red("I am red"), "   "))
trimws(col_red("   I am red   "))
ansi_trimws(col_red("   I am red   "))
?builtin_theme
?cat_line
cat_line("This is ", "a ", "line of text.", col = "red")
cat_bullet(letters[1:5])
cat_bullet(letters[1:5], bullet = "tick", bullet_col = "green")
cat_rule()
cat_line("This is ", "a ", "line of text.", col = "red")
cat_bullet(letters[1:5])
cat_bullet(letters[1:5], bullet = "tick", bullet_col = "green")
cat_rule()
library(rvest)
library(httr)
# 设置用户代理列表
user_agents <- c(
"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0",
"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.63 Safari/537.36",
"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
)
# 随机选择一个用户代理
random_user_agent <- sample(user_agents, 1)
# 随机选择一个用户代理
random_user_agent <- sample(user_agents, 1)
# 创建会话对象并设置请求头
session <- html_session("http://example.com", user_agent(random_user_agent))
# 创建会话对象并设置请求头
session <- session("http://example.com", user_agent(random_user_agent))
# 发送GET请求
response <- GET(session)
# 发送GET请求
response <- GET(session)
# 创建会话对象并设置请求头
session <- session("http://baidu.com", user_agent(random_user_agent))
# 发送GET请求
response <- GET(session)
# 创建会话对象并设置请求头
session <- session("http://ifpni.org/index.htm", user_agent(random_user_agent))
# 发送GET请求
response <- GET(session)
# 读取HTML内容
html_content <- content(response, as = "text")
# 随机选择一个用户代理
random_user_agent <- sample(user_agents, 1)
# 创建会话对象并设置请求头
session <- session("http://ifpni.org/index.htm", user_agent(random_user_agent))
# 发送GET请求
response <- GET(session)
# 创建会话对象并设置请求头
session <- session("http://ifpni.org/index.htm", user_agent(random_user_agent), timeout(10))
# 发送GET请求
response <- GET(session)
# 读取HTML内容
html_content <- content(response, as = "text")
# 解析HTML
parsed_html <- read_html(html_content)
# 进一步处理解析后的HTML
library(rWCVP)
?sub
?saveRDS
?write.csv
library(devtools)
install_github("ropensci/taxa")
install.packages("taxa")
library(taxa)
citation(package = "taxa")
citation(package = "rifpni")
?as_data_frame
x <- taxon(name = c('Homo sapiens', 'Bacillus', 'Ascomycota', 'Ericaceae'),
rank = c('species', 'genus', 'phylum', 'family'),
id = taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi'),
auth = c('Linnaeus, 1758', 'Cohn 1872', NA, 'Juss., 1789'))
x
class(x)
as_data_frame(x)
as_data_frame(x)
df_x <- as_data_frame(x)
df_x
View(df_x)
?as_taxon
x <- taxonomy(taxon(name = c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
rank = c('order', 'family', 'genus', 'species',
'species', 'family', 'genus', 'species'),
id = taxon_id(c('33554', '9681', '9688', '9689',
'9694', '9632', '9639', '9644'),
db = 'ncbi'),
auth = c('Bowdich, 1821', 'Fischer de Waldheim, 1817', 'Oken, 1816', 'L., 1758',
'L., 1758', 'Fischer de Waldheim, 1817', 'L., 1758', 'L., 1758')),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))
names(x) <- letters[1:8]
as_taxon(x)
as_taxon(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo'))
as_taxon(factor(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo')))
View(x)
x[["h"]]
x <- as_taxon(x)
x[["h"]]
?classification
x <- classification(list(
c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo'),
c('Carnivora', 'Felidae', 'Panthera', 'Panthera tigris'),
c('Carnivora', 'Ursidae', 'Ursus', 'Ursus arctos'),
c('Carnivora', 'Ursidae', 'Ursus', 'Ursus arctos'),
c('Carnivora', 'Felidae', 'Panthera', 'Panthera tigris')
))
x <- classification(list(
c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo'),
c('Carnivora', 'Felidae', 'Panthera', 'Panthera tigris'),
c('Carnivora', 'Ursidae', 'Ursus', 'Ursus arctos'),
c('Carnivora', 'Ursidae', 'Ursus', 'Ursus arctos'),
c('Carnivora', 'Felidae', 'Panthera', 'Panthera tigris')
))
x
x <- classification(c(3, 4, 4, 5, 5, 6, 8, 8, 2, 5, 6, 2),
taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)))
x
x <- classification(c(3, 4, 4, 5, 5, 6, 8, 8, 2, 5, 6, 2),
taxonomy(taxon(name = c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
rank = c('order', 'family', 'genus', 'species',
'species', 'family', 'genus', 'species'),
id = taxon_id(c('33554', '9681', '9688', '9689',
'9694', '9632', '9639', '9644'),
db = 'ncbi'),
auth = c('Bowdich, 1821', 'Fischer, 1817',
'Oken, 1816', 'L., 1758',
'L., 1758', 'Fischer, 1817',
'L., 1758', 'L., 1758')),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7)))
names(x) <- letters[1:12]
x
tax_name(x)
tax_rank(x)
tax_id(x)
tax_db(x)
tax_auth(x)
tax_author(x)
tax_date(x)
tax_cite(x)
tax_name(x)
tax_rank(x)
tax_id(x)
tax_db(x)
tax_auth(x)
tax_author(x)
tax_date(x)
tax_cite(x)
x[1:3]
x[tax_rank(x) > 'family']
is.na(x)
?db_ref
db_ref$get()
db_ref$set(
name = "my_new_database",
url = "http://www.my_tax_database.com",
desc = "I just made this up",
id_regex = ".*"
)
db_ref$get()
db_ref$reset()
db_ref$get()
md <- db_ref$set(
name = "my_new_database",
url = "http://www.my_tax_database.com",
desc = "I just made this up",
id_regex = ".*"
)
md
View(md)
View(md)
ncbi <- db_ref$get('ncbi')
View(ncbi)
ncbi[[1]][[1]][[1]][[1]][[1]][[1]]
ncbi[[1]]
?internodes
x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))
x
taxonomy(taxon(name = c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
rank = c('order', 'family', 'genus', 'species',
'species', 'family', 'genus', 'species'),
id = taxon_id(c('33554', '9681', '9688', '9689',
'9694', '9632', '9639', '9644'),
db = 'ncbi'),
auth = c('Bowdich, 1821', 'Fischer, 1817',
'Oken, 1816', 'L., 1758',
'L., 1758', 'Fischer, 1817',
'L., 1758', 'L., 1758')),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))
internodes(x)
is_internode(x)
x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))
is_internode(x)
x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))
is_leaf(x)
x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))
is_root(x)
is_root(x, subset = 2:8)
x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris'),
supertaxa = c(NA, 1, 2, 3, 3))
is_stem(x)
x <- taxon(c('A', 'B', 'C'))
is_taxon(x)
is_taxon(1:2)
x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))
is_taxonomy(x)
is_taxonomy(1:2)
x <- taxon_authority(c('Cham. & Schldl.', 'L.'),
date = c('1827', '1753'))
is_taxon_authority(x)
is_taxon_authority(1:3)
x <- taxon_db(c('ncbi', 'ncbi', 'itis'))
is_taxon_db(x)
is_taxon_db(1:3)
x <- taxon_id(c('9606', '1386', '4890', '4345'), db = 'ncbi')
is_taxon_id(x)
is_taxon_id(1:3)
x <- taxon_rank(c('species', 'species', 'phylum', 'family'))
is_taxon_rank(x)
is_taxon_rank(1:3)
x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))
leaves(x)
leaves(x, value = tax_name(x))
x
x <- taxonomy(c('Carnivora', 'Felidae', 'Panthera', 'Panthera leo',
'Panthera tigris', 'Ursidae', 'Ursus', 'Ursus arctos'),
supertaxa = c(NA, 1, 2, 3, 3, 1, 6, 7))
n_leaves(x)
library(taxlist)
?clean
Easplist@taxonRelations <- Easplist@taxonRelations[1:5, ]
## Now apply cleaning
Easplist <- clean(Easplist)
summary(Easplist)
?clean_strings
## Leading, trailing and multiple spaces
clean_strings(" Cyperus    papyrus L.     ")
?count_taxa
count_taxa(iris$Species)
count_taxa(Easplist)
count_taxa(Easplist, level = "species")
Easplist
data("Easplist")
force(Easplist)
View(Easplist)
count_taxa(Easplist)
count_taxa(Easplist, level = "species")
count_taxa(~life_form, Easplist, include_na = TRUE)
?df2taxlist
Cyperus <- read.csv(file = file.path(path.package("taxlist"), "cyperus",
"names.csv"))
head(Cyperus)
Cyperus$AcceptedName <- !Cyperus$SYNONYM
df2taxlist(Cyperus)
Plants <- df2taxlist(c("Triticum aestivum", "Zea mays"), AuthorName = "L.")
summary(Plants, "all")
?dissect_name
sp_list <- subset(x = Easplist, subset = Level == "variety", slot = "relations")
sp_list <- accepted_name(sp_list)[c(1:10), "TaxonName"]
dissect_name(sp_list)
dissect_name(sp_list, repaste = c(1:2))
?get_children
summary(as.factor(Easplist$life_form))
summary(Easplist[1:5, ], "all")
Ebenaceae <- subset(x = Easplist, subset = TaxonName == "Ebenaceae")
Ebenaceae
Ebenaceae <- get_children(Easplist, Ebenaceae)
Ebenaceae
Diostri <- subset(x = Easplist, subset = TaxonConceptID == 52403,
slot = "relations")
Diostri
Diostri <- get_parents(Easplist, Diostri)
Diostri
