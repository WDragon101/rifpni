?edit_match
page(edit_match())
page(edit_match
)
?wcvp_checklist
?edit_match
page(edit_match)
edit_match()
page(wcvp_match_fuzzy)
wcvp_names <- rWCVPdata::wcvp_names
wcvp_match_fuzzy(redlist_example, wcvp_names, "scientificName")
redlist_match <- wcvp_match_fuzzy(redlist_example, wcvp_names = wcvp_names, "scientificName")
View(wcvp_names)
View(redlist_match)
redlist_example
redlist_example <- redlist_example
View(redlist_example)
redlist_fuzzy_match <- wcvp_match_fuzzy(redlist_example, wcvp_names, "scientificName")
redlist_phonetic_match <- phonetic_match(redlist_example, wcvp_names, "scientificName")
redlist_edit_match <- edit_match(redlist_example, wcvp_names, "scientificName")
View(wcvp_names)
View(redlist_phonetic_match)
View(redlist_match)
View(redlist_fuzzy_match)
View(redlist_example)
View(redlist_edit_match)
View(redlist_example)
View(redlist_edit_match)
page(wcvp_match_exact)
redlist_exact_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", author_col = "authority")
redlist_exact_with_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", author_col = "authority", id_col="assessmentId")
redlist_exact_without_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", id_col = "assessmentId")
View(redlist_exact_without_author)
View(redlist_exact_with_author)
View(redlist_match)
redlist_match_with_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", author_col = "authority", id_col="assessmentId")
redlist_match_without_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", id_col = "assessmentId")
?wcvp_match_exact
wcvp_match_exact(redlist_example, wcvp_names, "scientificName",
author_col = "authority"
)
redlist_match_with_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", author_col = "authority")
redlist_match_with_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", author_col = "authority", id_col="assessmentId")
redlist_match_without_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", id_col = "assessmentId")
View(redlist_match_with_author)
View(redlist_match_without_author)
redlist_match_with_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", author_col = "authority")
redlist_match_with_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", author_col = "authority", id_col = NA)
redlist_match_with_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", author_col = "authority", id_col = NULL)
View(redlist_example)
matches <- wcvp_match_names(redlist_example, name_col = "scientificName", author_col = "authority", fuzzy = TRUE, progress_bar = FALSE)
View(matches)
redlist_match_with_author <- wcvp_match_exact(redlist_example, wcvp_names, "scientificName", author_col = "authority")
redlist_match_with_author <- wcvp_match_names(redlist_example, wcvp_names, "scientificName", author_col = "authority", id_col="assessmentId")
redlist_match_without_author <- wcvp_match_names(redlist_example, wcvp_names, "scientificName", id_col = "assessmentId")
redlist_match_without_id <- wcvp_match_names(redlist_example, wcvp_names, "scientificName", author_col = "authority")
View(redlist_match_without_id)
?get_area_name
?get_wgsrpd3_codes
View(wgsrpd_mapping)
get_wgsrpd3_codes("Brazil")
get_wgsrpd3_codes("Brazil")
get_wgsrpd3_codes("Brazil")
get_wgsrpd3_codes("Brazil")
get_wgsrpd3_codes("Brazil")
get_wgsrpd3_codes("Brazil")
get_wgsrpd3_codes("Brazil")
get_wgsrpd3_codes("Brazil")
get_wgsrpd3_codes("China")
get_wgsrpd3_codes("Brazil")
get_wgsrpd3_codes("Brazil", render_report=TRUE)
?get_area_name
get_area_name(get_wgsrpd3_codes("Brazil"))
get_area_name(c("BZC", "BZE", "BZL", "BZN", "BZS"))
?powo_map
?powo_pal
page(scale_color_powo())
page(scale_colour_powo())
page(scale_colour_powo
)
page(scale_color_powo
)
page(scale_fill_powo)
?scale_color_manual
powo_pal()
page(powo_pal)
scales::hue_pal()
?wcvp_checklist
page(wcvp_checklist)
?cli_abort
?match.arg
test_match.arg <- function(taxon_rank = c("species", "genus", "family",
"order", "higher")){
taxon_rank <- match.arg(taxon_rank)
}
test_match.arg(taxon_rank = c("species", "genus"))
test_match.arg <- function(taxon_rank = c("species", "genus", "family",
"order", "higher")){
taxon_rank <- match.arg(taxon_rank)
print(taxon_rank)
}
test_match.arg(taxon_rank = "species")
test_match.arg(taxon_rank = c("species
"))
test_match.arg(taxon_rank = c("speci"))
test_match.arg(taxon_rank = c("gen","speci"))
test_match.arg <- function(taxon_rank)){
test_match.arg <- function(taxon_rank)){
View(test_match.arg)
test_match.arg <- function(taxon_rank){
taxon_rank <- match.arg(taxon_rank)
print(taxon_rank)
}
test_match.arg(taxon_rank = c("gen","speci"))
test_match.arg <- function(taxon_rank = c("species", "genus", "family",
"order", "higher")){
taxon_rank <- match.arg(taxon_rank)
print(taxon_rank)
}
test_match.arg(taxon_rank = c("gen","speci"))
pmatch("med", c("mean", "median", "mode"))
test_match.arg(taxon_rank = c("e))
""
)
))
test_match.arg <- function(taxon_rank = c("species", "genus", "family",
test_match.arg <- function(taxon_rank = c("species", "genus", "family",
"order", "higher")){
taxon_rank <- match.arg(taxon_rank)
print(taxon_rank)
}
test_match.arg(taxon_rank = c("e"))
test_match.arg(taxon_rank = c("s"))
test_match.arg(taxon_rank = c("p"))
test_match.arg <- function(taxon_rank = c("species", "genus", "family",
"order", "higher","higher too")){
taxon_rank <- match.arg(taxon_rank)
print(taxon_rank)
}
test_match.arg(taxon_rank = c("h"))
test_match.arg(taxon_rank = c("high"))
taxon_rank <- match.arg(taxon_rank, several.ok = TRUE)
print(taxon_rank)
test_match.arg <- function(taxon_rank = c("species", "genus", "family",
"order", "higher","higher too")){
taxon_rank <- match.arg(taxon_rank, several.ok = TRUE)
print(taxon_rank)
}
test_match.arg(taxon_rank = c("high"))
test_match.arg(taxon_rank = c("high"))
test_match.arg <- function(taxon_rank = c("species", "genus", "family",
"order", "higher","higher too")){
taxon_rank <- match.arg(taxon_rank, several.ok = TRUE)
print(taxon_rank)
}
test_match.arg <- function(taxon_rank = c("species", "genus", "family",
"order", "higher","higher too")){
taxon_rank <- match.arg(taxon_rank, several.ok = TRUE)
print(taxon_rank)
}
test_match.arg(taxon_rank = c("high"))
test_match.arg(taxon_rank = c("highER"))
test_match.arg(taxon_rank = c("higher"))
test_match.arg(taxon_rank = c("higher", "species"))
test_match.arg(taxon_rank = c("higher", "sp"))
test_match.arg(taxon_rank = c("higher", "se"))
test_match.arg(taxon_rank = c("higher", "enu"))
library(cli)
?cli_bullets
cli_bullets(c("noindent"))
cli_bullets(c(" " = "indent"))
cli_bullets(c("*" = "bullet"))
cli_bullets(c(">" = "arrow"))
cli_bullets(c("v" = "success"))
cli_bullets(c("x" = "danger"))
cli_bullets(c("!" = "warning"))
cli_bullets(c("i" = "info"))
cli_bullets(c(
"noindent",
" " = "indent",
"*" = "bullet",
">" = "arrow",
"v" = "success",
"x" = "danger",
"!" = "warning",
"i" = "info"
))
cli_abort(c(
+     "noindent",
+     " " = "indent",
cli_abort(c(
+     "noindent",
+     " " = "indent",
cli_abort(c("noindent"))
library(rWCVP)
page(wcvp_checklist)
cli_abort(c("Taxon not found.", "Possible values for this taxonomic rank can be viewed using")
)
?cli_abort
cli_abort(c("this is my error! Do not mess with R!"))
cli_abort(c(
"noindent",
" " = "indent",
"*" = "bullet",
">" = "arrow",
"v" = "success",
"x" = "danger",
"!" = "warning",
"i" = "info"
))
+ ))
cli_bullets(c(
"noindent",
" " = "indent",
"*" = "bullet",
">" = "arrow",
"v" = "success",
"x" = "danger",
"!" = "warning",
"i" = "info"
))
cli_abort(c(
"noindent",
" " = "indent",
"*" = "bullet",
">" = "arrow",
"v" = "success",
"x" = "danger",
"!" = "warning",
"i" = "info"
))
library(paleobioDB)
page(pbdb_collections_geo)
library(rWCVP)
?wcvp_distribution
?wcvp_match_names
library(cli)
library(devtools)
library(rifpni)
supragenus("cla", searchOnlyByFirstSymbols = "on")
read_html("http://ifpni.org/supragenus.htm?formIndex=def&submitForm=Search&isExtended=1&name=cla&searchOnlyByFirstSymbols=on&order=name&orderDirection=asc&author=&originalSpelling=&yearFrom=&yearTo=&")
library(rvest)
read_html("http://ifpni.org/supragenus.htm?formIndex=def&submitForm=Search&isExtended=1&name=cla&searchOnlyByFirstSymbols=on&order=name&orderDirection=asc&author=&originalSpelling=&yearFrom=&yearTo=&")
document()
library(rifpni)
load_all(rifpni)
check()
check()
document()
check()
supragenus("cls", searchOnlyByFirstSymbols = "on")
?read_html
document()
check()
supragenus("cla",searchOnlyByFirstSymbols = "on")
document()
check()
supragenus("cla",searchOnlyByFirstSymbols = "on")
read_html(""http://ifpni.org/supragenus.htm?formIndex=def&submitForm=Search&isExtended=1&name=cla&searchOnlyByFirstSymbols=on&order=name&orderDirection=asc&author=&originalSpelling=&yearFrom=&yearTo=&"")
read_html("http://ifpni.org/supragenus.htm?formIndex=def&submitForm=Search&isExtended=1&name=cla&searchOnlyByFirstSymbols=on&order=name&orderDirection=asc&author=&originalSpelling=&yearFrom=&yearTo=&")
f <- read_html("http://ifpni.org/supragenus.htm?formIndex=def&submitForm=Search&isExtended=1&name=cla&searchOnlyByFirstSymbols=on&order=name&orderDirection=asc&author=&originalSpelling=&yearFrom=&yearTo=&")
View(f)
xml_child(f, 2)
library(rvest)
xml_child(f, 1)
library(xml2)
supragenus("cla",searchOnlyByFirstSymbols = "on")
document()
check()
document()
check()
document()
check()
supragenus("cla")
b <- function(url){f <- read_html(url) return f}
b <- function(url){print(read_html(url))}
b("http://ifpni.org/supragenus.htm?formIndex=def&submitForm=Search&isExtended=1&name=cla&searchOnlyByFirstSymbols=&order=name&orderDirection=asc&author=&originalSpelling=&yearFrom=&yearTo=&")
basic_graber <- function(basic_url) {
f <- read_html(basic_url)
pages_url <- c()
if (!is.na(html_node(f, "a.pagieng_toEnd"))) {
end_page <- as.numeric(f %>% html_node("a.paging_toEnd") %>% html_attr("title"))
pages_url <- paste0(basic_url, paste0("page=", c(1:end_page)))}
cli::cli_alert_success(paste0("There are ",length(pages_url)," pages found."))}
basic_graber("http://ifpni.org/supragenus.htm?formIndex=def&submitForm=Search&isExtended=1&name=cla&searchOnlyByFirstSymbols=&order=name&orderDirection=asc&author=&originalSpelling=&yearFrom=&yearTo=&")
View(basic_graber)
length(c())
rm(f)
rm(b)
rm(basic_graber())
rm(basic_graber
)
getwd()
source("D:/Work_Space/My-scripts/R/rifpni/R/supragenus.R")
?supragenus()
source("D:/Work_Space/My-scripts/R/rifpni/R/supragenus.R")
source("D:/Work_Space/My-scripts/R/rifpni/R/supragenus.R")
document()
rm(supragenus)
document()
load_all(rifpni)
setwd("D:/Work_Space/My-scripts/R/")
load_all("rifpni")
check()
setwd("D:/Work_Space/My-scripts/R/rifpni/")
check()
supragenus("cla", searchOnlyByFirstSymbols = "on")
source("D:/Work_Space/My-scripts/R/rifpni/R/supragenus.R")
rm(.basic_supragenus())
rm(.basic_supragenus
)
rm(basic_supragenus)
rm(supragenus)
document()
source("D:/Work_Space/My-scripts/R/rifpni/R/supragenus.R")
source("D:/Work_Space/My-scripts/R/rifpni/R/supragenus.R")
library(devtools)
document()
check()
document()
check()
supragenus("cla", searchOnlyByFirstSymbols = "on")
read_html("http://ifpni.org/supragenus.htm?formIndex=def&submitForm=Search&isExtended=1&name=cla&searchOnlyByFirstSymbols=on&order=name&orderDirection=asc&author=&originalSpelling=&yearFrom=&yearTo=&")
document()
check()
supragenus("cla", searchOnlyByFirstSymbols = "on")
t <- read_html("http://ifpni.org/supragenus.htm?formIndex=def&submitForm=Search&isExtended=1&name=cla&searchOnlyByFirstSymbols=on&order=name&orderDirection=asc&author=&originalSpelling=&yearFrom=&yearTo=&")
document()
check()
supragenus("cla", searchOnlyByFirstSymbols = "on")
source("D:/Work_Space/My-scripts/R/rifpni/R/supragenus.R")
rm(t)
rm(basic_supragenus)
rm(supragenus)
document()
laod_all("this package")
load_all("rifpni")
check()
cla <- supragenus("cla", searchOnlyByFirstSymbols = "on")
cli
library(cli)
document()
check()
f <- supragenus("cla", searchOnlyByFirstSymbols = "on")
document()
?cli_process_start
cli_process_start("Calculating")
?interactive
if (interactive()){x11()}
fun <- function() {
cli_process_start("Calculating")
if (interactive()) Sys.sleep(1)
if (runif(1) < 0.5) stop("Failed")
cli_process_done()
}
tryCatch(fun(), error = function(err) err)
?cli_progress_demo
clena <- function(){
cli_progress_bar("Cleaning data", total = 100)
for (i in 1:100){
Sys.sleep(5/100)
cli_progress_update()
}
cli_progress_done()
}
clean()
clean <- function(){
cli_progress_bar("Cleaning data", total = 100)
for (i in 1:100){
Sys.sleep(5/100)
cli_progress_update()
}
cli_progress_done()
}
clean()
clean()
document()
check()
f <- supragenus("cla", searchOnlyByFirstSymbols = "on")
View(f)
library(rgbif)
?occ_download
?occ_search
# 获取目标类群在GBIF上的地理分布记录
data <- occ_search(scientificName = "Mahonia", limit= 10000, hasCoordinate = TRUE, basisOfRecord= "PRESERVED_SPECIMEN")
name_suggest(q="Achlys")
a <- occ_search(taxonKey = 3033912, limit = 100000, hasCoordinate = TRUE, hasGeospatialIssue = FALSE)$data%>%filter(c("scientificName","decimalLatitude","decimalLongitude"))
?filter
library(dplyr)
a <- occ_search(taxonKey = 3033912, limit = 100000, hasCoordinate = TRUE, hasGeospatialIssue = FALSE)$data%>%filter(c("scientificName","decimalLatitude","decimalLongitude"))
a <- occ_search(taxonKey = 3033912, limit = 100, hasCoordinate = TRUE, hasGeospatialIssue = FALSE)$data%>%filter(c("scientificName","decimalLatitude","decimalLongitude"))
a <- occ_search(taxonKey = 3033912, limit = 100, hasCoordinate = TRUE, hasGeospatialIssue = FALSE)$data
View(a)
a %>% filter(scientificName, decimalLatitude, decimalLongitude)
a <- occ_search(taxonKey = 3033912, limit = 100, hasCoordinate = TRUE, hasGeospatialIssue = FALSE)$data%>%select(c("scientificName","decimalLatitude","decimalLongitude"))
?occ_count
occ_search
?occ_search
View(a)
a <- occ_search(taxonKey = 3033912, limit = 100, hasCoordinate = TRUE, hasGeospatialIssue = FALSE)
a$meta$count
View(f)
View(a)
document()
check()
ff <- supragenus("cla", searchOnlyByFirstSymbols = "on")
t <- "http://ifpni.org/supragenus.htm?id=ABBBCF19-1A47-D7EE-18B4-88EB8B277D84"
strsplit(t, "=")
strsplit(t, "=")[-1]
strsplit(t, "=")[[1]]
strsplit(t, "=")[[1]][1]
strsplit(t, "=")[[1]][-1]
document()
rm(a)
rm(f)
rm(t)
rm(clean)
rm(clena)
rm(fun)
check()
f<-supragenus("cla", searchOnlyByFirstSymbols = "on")
list_spinners()
spinners <- list_spinners()
# 打印每个 spinner 的样式名
for (spinner in spinners) {
cat(spinner, "\n")
}
for (spinner in spinners){get_spinner(spinner)}
View(f)
document()
check()
f <- supragenus("cla", searchOnlyByFirstSymbols = "on")
document()
check()
f <- supragenus("cla", searchOnlyByFirstSymbols = "on")
document()
f<-supragenus()
load("D:/Work_Space/My-scripts/R/rifpni/data/all_supragenus_20231109.rda")
rm(all_supragenus_20231109)
saveRDS(f, "D:/Work_Space/My-scripts/R/rifpni/data/all_supragenus_info.rda")
cla <- supragenus("cla", searchOnlyByFirstSymbols = "on")
cla <- supragenus("cla", searchOnlyByFirstSymbols = "on")
cla <- supragenus("cla", searchOnlyByFirstSymbols = "on")
document()
load("D:/Work_Space/My-scripts/R/rifpni/data/all_supragenus_info.rda")
load("D:/Work_Space/My-scripts/R/rifpni/data/all_supragenus_info.rda")
View(f)
wkpath <- "D:/Work_Space/My-scripts/R/gdplants-main/"
setwd(wkpath)
SDM_env_path <- "environmental_layers/"
### Please set the folder with the occurrence data.
### Data should contain two columns "x" and "y" to give the longitude and latitude of occurrences
input_dir <- "2.2_cleaning_cc/cleaning_cc_occurrences"
### Please set the folder for the output maps
output_dir <- "3.2_mapping_SDM/0_parameter_optimization"
### Please load polygon mapping functions from where you save these scripts
cmon.files=list.files("functions/sdm_functions",full.names = T)
sapply(cmon.files,source)
### Load Kew data
### Please contact Kew (https://powo.science.kew.org/) for distribution data and map
### Or you can use your own reference database
library(dplyr)
library(sf)
library(sp)
library(raster)
library(maptools)
library(tools)
library(dismo)
library(cluster)
library(class)
library(gam)
library(gbm)
library(randomForest)
library(ROCR)
library(parallel)
library(spatstat)
library(rgeos)
library(gstat)
library(utils)
cmon.files=list.files("D:/ALL_Softwares/R-4.2.0/library/PseuAbs_master/PseuAbs-master/R/",full.names = T)
sapply(cmon.files,source)
print("pseuabs functions loaded")
kewmap <- readRDS(file.path(wkpath,"kewmap.rds"))
kewdata <- readRDS(file.path(wkpath,"kewdata.rds"))
print("map and data loaded")
# kewdata_native <- kewdata[kewdata$Introduced == 0,]
kewdata_native <- kewdata[kewdata$occurrence_type == "native",]
kewdata_family_table <- na.omit(kewdata_native)
# kewdata_family_table$name <- paste(kewdata_family_table$Genus,kewdata_family_table$Species)
kewdata_family_table$name <- kewdata_family_table$Species
### Extract species families and names ####
allfiles <- list.files(input_dir, full.names = F, pattern = ".\\csv")
allfilenames <- sapply(allfiles, function(x)   {strsplit(x, ".\\csv")[[1]][1]})
spfamily <- sapply(allfilenames, function(x)   {strsplit(x, "_")[[1]][1]})
Spname <- sapply(allfilenames, function(x)   {strsplit(x, "_")[[1]][2]})
Spname
Spname[1]
for (id in 1:length(Spanme)){print(Spname[id])}
for (id in 1:length(Spname)){print(Spname[id])}
names(Spname) <- NULL
Spanme
Spname
for (i in Spname){print(i)}
spi_name <- Spname[1]
spp_occ <- read.csv(list.files(input_dir, pattern = paste0(spi_name, ".csv"), full.names = T))
list.files(input_dir, pattern = paste0(spi_name, ".csv")
,full.names=T)
input_dir
spfamily
file.path(input_dir, unique(spfamily))
library(PseuAbs)
?wsl.samplePseuAbs
